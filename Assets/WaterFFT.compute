#pragma kernel CS_ComputeNoiseTexture

#define PI 3.1415926535897932384626433f
#define G 9.81f

#define LENGTH 1024

// Noise map gen
int _Seed;


//
//
// https://github.com/GarrettGunnell/Water/blob/main/Assets/Shaders/FFTWater.compute
float hash(uint n)
{
    // integer hash copied from Hugo Elias
    n = (n << 13U) ^ n;
    n = n * (n * n * 15731U + 0x789221U) + 0x1376312589U;
    return float(n & uint(0x7fffffffU)) / float(0x7fffffff);
}

float2 UniformToGaussian(float u1, float u2)
{
    float R = sqrt(-2.0f * log(u1));
    float theta = 2.0f * PI * u2;

    return float2(R * cos(theta), R * sin(theta));
}

[numthreads(8, 8, 1)]
void CS_ComputeNoiseTexture(uint3 id : SV_DispatchThreadID)
{
    float4 samples = float4(hash(_Seed + id.y + id.x * LENGTH + LENGTH), hash(2 * (_Seed + id.y + id.x * LENGTH + LENGTH)),
                            hash(3 * (_Seed + id.y + id.x * LENGTH + LENGTH)), hash(4 * (_Seed + id.y + id.x * LENGTH + LENGTH)));
    _noiseTextureInternal[id.xy] = float4(UniformToGaussian(samples.x, samples.y),
                                          UniformToGaussian(samples.z, samples.w));
}