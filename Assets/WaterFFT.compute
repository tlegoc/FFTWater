// https://www.keithlantz.net/2011/10/ocean-simulation-part-one-using-the-discrete-fourier-transform/

#pragma kernel CS_ComputeNoiseTexture
#pragma kernel CS_Computeh0Spectrum
#pragma kernel CS_Computehtilde
#pragma kernel CS_HorizontalDFT
#pragma kernel CS_VerticalDFT

#define PI 3.1415926535897932384626433f
#define G 9.81f
#define G_SQRT 3.13209195267f

int _N;
float _L;

// Phillips parameters
float2 _w; // Wind dir
float _V; // Wind speed
float _A; // I still don't know what this param does
float _dt; // Delta time
float _t; // Time
int _Seed;
float3 _offsets; // CPU random offsets

RWTexture2D<float4> _noiseTextureInternal;
Texture2D<float4> _noiseTexture;
RWTexture2D<float4> _h0spectrum; // h0, h0conj
RWTexture2D<float2> _Spectrum; // Spectrum updated each frame
RWTexture2D<float4> _PostHorizontalDFT; // Transition texture between horizontal and vertical DFTs
RWTexture2D<float1> _Heightmap; // Output heightmap

// I forgot why they're here
RWTexture2D<float4> _htildeDisplacement;
RWTexture2D<float4> _htildeSlope;

//
//
// https://github.com/GarrettGunnell/Water/blob/main/Assets/Shaders/FFTWater.compute
float hash(uint n)
{
    // integer hash copied from Hugo Elias
    n = (n << 13U) ^ n;
    n = n * (n * n * 15731U + 0x789221U) + 0x1376312589U;
    return float(n & uint(0x7fffffffU)) / float(0x7fffffff);
}

float2 UniformToGaussian(float u1, float u2)
{
    float R = sqrt(-2.0f * log(u1));
    float theta = 2.0f * PI * u2;

    return float2(R * cos(theta), R * sin(theta));
}

//
//
//

/*
 *
 * COORDINATES id.xy
 *
 * id.y
 * ^
 * |
 * |
 * |
 * |
 * O----> id.x
 *
 */


float2 complex(float theta)
{
    return float2(cos(theta), sin(theta));
}

float2 complexMul(float2 a, float2 b)
{
    return float2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

float2 conj(float2 v)
{
    return float2(v.x, -v.y);
}

float2 K(float n_prime, float m_prime)
{
    return float2((2 * PI * n_prime - PI * float(_N)) / _L, (2 * PI * m_prime - PI * float(_N)) / _L);
}

float2 NMPrimeFromK(float2 k)
{
    return float2((k.x * _L + PI * float(_N)) / (2 * PI), (k.y * _L + PI * float(_N)) / (2 * PI));
}

float2 XZ(const float n_prime, const float m_prime)
{
    return float2((n_prime - float(_N) / 2.0f) * _L / float(_N), (m_prime - float(_N) / 2.0f) * _L / float(_N));
}

float dispersion(const float n_prime, const float m_prime)
{
    return G_SQRT * sqrt(length(K(n_prime, m_prime)));
}

float dispersion(float2 k)
{
    return G_SQRT * sqrt(length(k));
}

float dispersion(float k)
{
    return G_SQRT * sqrt(k);
}

float phillips(int n_prime, int m_prime)
{
    const float l = _V * _V / G;

    const float2 k = K(n_prime, m_prime);
    if (length(k) < 0.000001f) return 0.0f;

    const float k_length = length(k);
    const float k_length2 = k_length * k_length;
    const float k_length4 = k_length2 * k_length2;

    const float dot_prod = dot(normalize(_w), normalize(k));
    const float frac_top = exp(-1.0f / (k_length2 * l * l));

    return _A * (frac_top / k_length4) * dot_prod * dot_prod;
}

// Initial spectrum generation
float2 h_tilde0(float n_prime, float m_prime, bool reverse = false)
{
    const float one_over_sqrt2 = 0.70710678118f;

    // float e1 = gaussrand(float2(abs(n_prime), abs(m_prime)));
    // float e2 = gaussrand(float2(abs(n_prime + e1), abs(m_prime + e1)));

    // No need for complexMul, the only complex here is e so we just
    // multiply each component by the same value.
    if (!reverse)
        return one_over_sqrt2 * _noiseTexture[uint2(n_prime, m_prime)].xy * sqrt(phillips(n_prime, m_prime));
    else
        return one_over_sqrt2 * _noiseTexture[uint2(-n_prime, -m_prime)].zw * sqrt(phillips(n_prime, m_prime));
}

bool IsNaN(float x)
{
    return !(x < 0.0f || x > 0.0f || x == 0.0f);
}

// What actually makes the wave spectrum move.
float2 h_tilde(float n_prime, float m_prime, float t, float2 ht0, float2 ht0conj)
{
    const float omegat = dispersion(n_prime, m_prime) * t;

    const float c = cos(omegat);
    const float s = sin(omegat);

    const float2 c0 = float2(c, s);
    const float2 c1 = float2(c, -s);

    float2 res = complexMul(ht0, c0) + complexMul(ht0conj, c1);
    if (IsNaN(res.x)) res.x = 0.0f;
    if (IsNaN(res.y)) res.y = 0.0f;

    return res;
}

[numthreads(1,1,1)]
void CS_ComputeNoiseTexture(uint3 id : SV_DispatchThreadID)
{
    float4 samples = float4(hash(_Seed * id.y + id.x * 100), hash(_Seed * 2 * id.y + id.x * 100),
                            hash(_Seed * 3 * id.y + id.x * 100), hash(_Seed * 4 * id.y + id.x * 100));
    _noiseTextureInternal[id.xy] = float4(UniformToGaussian(samples.x, samples.y),
                                          UniformToGaussian(samples.z, samples.w));
}

[numthreads(1,1,1)]
void CS_Computeh0Spectrum(uint3 id : SV_DispatchThreadID)
{
    const float2 ht0 = h_tilde0((float)id.x, (float)id.y);
    const float2 ht0conj = conj(h_tilde0(-((float)id.x), -((float)id.y), true));

    _h0spectrum[id.xy] = float4(ht0, ht0conj);
}

[numthreads(1,1,1)]
void CS_Computehtilde(uint3 id : SV_DispatchThreadID)
{
    float2 ht = h_tilde((float)id.x, (float)id.y, _t, _h0spectrum[id.xy].rg, _h0spectrum[id.xy].ba);

    _Spectrum[id.xy] = ht;
}

[numthreads(1, 1, 1)]
void CS_HorizontalDFT(uint3 id : SV_DispatchThreadID)
{
    float2 res = float2(0.0, 0.0);
    float2 x_v = XZ(id.x, id.y);
    float x = x_v.x;
    for (int n_prime = 0; n_prime < _N; n_prime++)
    {
        float2 k = K(n_prime, id.y);
        res += complexMul(_Spectrum[uint2(n_prime, id.y)], complex(x * k.x));
    }
    _PostHorizontalDFT[id.xy] = float4(res, 0.0, 1.0);
}


[numthreads(1, 1, 1)]
void CS_VerticalDFT(uint3 id : SV_DispatchThreadID)
{
    float2 res = float2(0.0, 0.0);
    float2 x_v = XZ(id.x, id.y);
    float z = x_v.y;
    for (int m_prime = 0; m_prime < _N; m_prime++)
    {
        float2 k = K(id.x, m_prime);
        res += complexMul(_PostHorizontalDFT[uint2(id.x, m_prime)].xy, complex(z * k.y));
    }

    _Heightmap[id.xy] = res.x;
}
