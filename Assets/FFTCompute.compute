//--------------------------------------------------------------------------------------
// Copyright 2014 Intel Corporation
// All Rights Reserved
//
// Permission is granted to use, copy, distribute and prepare derivative works of this
// software for any purpose and without fee, provided, that the above copyright notice
// and this statement appear in all copies.  Intel makes no representations about the
// suitability of this software for any purpose.  THIS SOFTWARE IS PROVIDED "AS IS."
// INTEL SPECIFICALLY DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, AND ALL LIABILITY,
// INCLUDING CONSEQUENTIAL AND OTHER INDIRECT DAMAGES, FOR THE USE OF THIS SOFTWARE,
// INCLUDING LIABILITY FOR INFRINGEMENT OF ANY PROPRIETARY RIGHTS, AND INCLUDING THE
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  Intel does not
// assume any responsibility for any errors which may appear in this software nor any
// responsibility to update it.
//--------------------------------------------------------------------------------------

// Input Preprocess Defines:
// TRANSFORM_INVERSE: Defined for inverse fft only
// BUTTERFLY_COUNT: number of passes to perform
// ROWPASS: defined for tranformation along the x axis
// LENGTH: pixel length of row or column
// BUTTERFLY_LUT: Defined if butterfly lookup texture should be used

#pragma kernel ButterflySLM TRANSFORM_INVERSE BUTTERFLY_COUNT=10 LENGTH=1024
#pragma kernel ButterflySLM TRANSFORM_INVERSE BUTTERFLY_COUNT=10 LENGTH=1024 ROWPASS

Texture2D<float2> TextureSource;
RWTexture2D<float2> TextureTarget;

static const float PI = 3.14159265f;

void GetButterflyValues(uint passIndex, uint x, out uint2 indices, out float2 weights)
{
	int sectionWidth = 2 << passIndex;
	int halfSectionWidth = sectionWidth / 2;

	int sectionStartOffset = x & ~(sectionWidth - 1);
	int halfSectionOffset = x & (halfSectionWidth - 1);
	int sectionOffset = x & (sectionWidth - 1);

	sincos( 2.0*PI*sectionOffset / (float)sectionWidth, weights.y, weights.x );
	weights.y = -weights.y;

	indices.x = sectionStartOffset + halfSectionOffset;
	indices.y = sectionStartOffset + halfSectionOffset + halfSectionWidth;

	if (passIndex == 0)
	{
		indices = reversebits(indices) >> (32 - BUTTERFLY_COUNT) & (LENGTH - 1);
	}
}

groupshared float2 pingPongArray[2][LENGTH];
void ButterflyPass(int passIndex, uint x, uint t0, out float2 result)
{
	uint2 Indices;
	float2 Weights;
#ifdef BUTTERFLY_LUT
	float4 IndicesAndWeights = TextureButterfly[uint2(x, passIndex)];
	Indices = IndicesAndWeights.xy;
	Weights = IndicesAndWeights.zw;
#else
	GetButterflyValues(passIndex, x, Indices, Weights);
#endif

	float2 input1 = pingPongArray[t0][Indices.x];

	float2 input2 = pingPongArray[t0][Indices.y];

#ifdef TRANSFORM_INVERSE
	result = float2(input1.x + Weights.x * input2.x + Weights.y * input2.y,input1.y - Weights.y * input2.x + Weights.x * input2.y) * 0.5;
#else
	result = float2(input1.x + Weights.x * input2.x - Weights.y * input2.y, input1.y + Weights.y * input2.x + Weights.x * input2.y);
#endif
}

void ButterflyPassFinalNoI(int passIndex, int x, int t0, out float2 result)
{
	uint2 Indices;
	float2 Weights;
	GetButterflyValues(passIndex, x, Indices, Weights);

	float2 input1 = pingPongArray[t0][Indices.x];

	float2 input2 = pingPongArray[t0][Indices.y];

	result = (input1.x + Weights.x * input2.x + Weights.y * input2.y) * 0.5;
}


[numthreads( LENGTH, 1, 1 )]
void ButterflySLM(uint3 position : SV_DispatchThreadID)
{
#ifdef ROWPASS
	uint2 texturePos = uint2( position.xy );
#else
	uint2 texturePos = uint2( position.yx );
#endif

	// Load entire row or column into scratch array
	pingPongArray[0][position.x] = TextureSource[texturePos];
#if defined(ROWPASS) && !defined(TRANSFORM_INVERSE)
	// don't load values from the imaginary texture when loading the original texture
	pingPongArray[1][position.x].y = 0;
#endif
	
	uint2 textureIndices = uint2(0, 1);

	
	for (int i = 0; i < BUTTERFLY_COUNT-1; i++)
	{
		GroupMemoryBarrierWithGroupSync();
		ButterflyPass( i, position.x, textureIndices.x, pingPongArray[textureIndices.y][position.x]);
		textureIndices.xy = textureIndices.yx;
	}

	// Final butterfly will write directly to the target texture
	GroupMemoryBarrierWithGroupSync();

	// The final pass writes to the output UAV texture
#if defined(COLPASS) && defined(TRANSFORM_INVERSE)
	// last pass of the inverse transform. The imaginary value is no longer needed
	ButterflyPassFinalNoI(BUTTERFLY_COUNT - 1, position.x, textureIndices.x, textureIndices.y, TextureTarget[texturePos]);
#else
	ButterflyPass(BUTTERFLY_COUNT - 1, position.x, textureIndices.x, TextureTarget[texturePos]);
#endif

}
